// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

enum TransactionType {
  Income
  Expense
  Withdrawal
}

enum PaymentMethod {
  Cash
  CreditCard
  Crypto
}

generator client {
  provider        = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  transactions Transaction[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
model Transaction {
  id          Int      @id @default(autoincrement())
  type        TransactionType
  amount      Float
  currency    String
  date        DateTime
  description String?
  categoryId  Int?
  userId      String
  paymentTypeId Int?
  user        User     @relation(fields: [userId], references: [id])
  category    Category? @relation(fields: [categoryId], references: [id])
  paymentType PaymentType? @relation(fields: [paymentTypeId], references: [id])
}

model PaymentType {
  id          Int          @id @default(autoincrement())
  method      PaymentMethod
  details     String?      // Additional details as JSON or simple text
  transactions Transaction[]
}

model Category {
  id           Int           @id @default(autoincrement())
  name         String
  transactions Transaction[]
}
