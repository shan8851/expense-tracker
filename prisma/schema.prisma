generator client {
  provider        = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  projects      Project[]
  collaborations  Collaborator[]
}

model Project {
  id          String     @id @default(cuid())
  userId      String
  name        String
  description String?
  startDate   DateTime?
  endDate     DateTime?
  expenses    Expense[]
  timeLogs    TimeLog[]
  incomes     ProjectIncome[]
  collaborators Collaborator[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], name: "userProjectsIndex")
}

model Expense {
  id          String   @id @default(cuid())
  projectId   String
  amount      Float
  date        DateTime
  category    String   // Consider a Category model if you need more structured category management
  description String?

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model TimeLog {
  id        String   @id @default(cuid())
  projectId String
  hours     Float    // Consider storing in minutes or seconds for more granularity
  date      DateTime
  note      String?

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model ProjectIncome {
  id          String   @id @default(cuid())
  projectId   String
  amount      Float
  date        DateTime
  source      String   // Description of the income source, e.g., "Client payment", "Product sales"
  description String?

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Collaborator {
  id        String   @id @default(cuid())
  projectId String
  userId    String   // The collaborator's User ID
  role      String   // Role of the collaborator in the project, e.g., "Developer", "Designer"

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
}
