generator client {
  provider        = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

enum Plan {
  FREE
  PRO
  ELITE
}

enum RecurrenceFrequency {
  NONE
  MONTHLY
  ANNUALLY
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  stripeCustomerId String?   @unique
  plan          Plan      @default(FREE)
  accounts      Account[]
  sessions      Session[]
  projects      Project[]
}

model Project {
  id          String     @id @default(cuid())
  userId      String
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  expenses    Expense[]
  timeLogs    TimeLog[]
  incomes     ProjectIncome[]
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  hasRecurringPayments Boolean @default(false)
  @@index([userId], name: "userProjectsIndex")
}

model Expense {
  id          String   @id @default(cuid())
  projectId   String
  amount      Float
  date        DateTime
  category    String
  description String?
  recurring    RecurrenceFrequency @default(NONE)
  nextPaymentDue DateTime?
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model TimeLog {
  id        String   @id @default(cuid())
  projectId String
  hours     Float
  date      DateTime
  note      String?
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model ProjectIncome {
  id          String   @id @default(cuid())
  projectId   String
  amount      Float
  date        DateTime
  source      String
  description String?
  recurring    RecurrenceFrequency @default(NONE)
  nextPaymentDue DateTime?
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
}
